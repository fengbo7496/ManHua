/**
 * 将数字转化为相应的单位
 *
 * 100000以下不转换，100000以上转为以“万”为单位，超过1亿的转为以“亿”为单位
 */
function formatNumber(number) {
  var number = +number; // 将 字符串类型的数字转成数字类型
  var WAN = 10000;
  var TEN_WAN = WAN * 10;
  var YI = 100000000;
  var resultNumber = '';
  
  // 如果数字小于100000 直接返回
  if (number < TEN_WAN) {
    resultNumber = '' + number;
  }
  // 如果数字 100000 < number < 100000000  返回 以“万”为单位
  if (number > TEN_WAN && number < YI) {
    var ratioWan = number / WAN;
    // 是否超过100万
    if (ratioWan >= 100) {
      resultNumber = Math.floor(ratioWan) + '万';
    } else {
      resultNumber = (number / WAN).toFixed(1) + '万';
    }
  }
  // 如果 number > 100000000  返回 以“亿”为单位
  if (number > YI) {
    var ratioYi = number / YI;
    // 是否超过100亿
    if (ratioYi >= 100) {
      resultNumber = Math.floor(ratioYi) + '亿';
    } else {
      resultNumber = ratioYi.toFixed(1) + '亿';
    }
  }
  return resultNumber;
}

/**
 * 返回绝对值函数
 *
 * @param {*} number
 */
function abs(number) {
  if (number !== undefined) {
    return Math.abs(number);
  }
  return '';
}

// 小于10的数字补0 如：6 => 06
function paddingTwo(number) {
  return number < 10 ? '0' + number : '' + number;
}

// 将小于13位的时间戳补0为13位数字的时间戳
function paddingTime(date) {
  var timestampStr = '' + date;
  var LEN = 13; // 时间戳是一个13位的数字
  // 如果时间戳参数的位数是一个小于13的数字，则需要补0
  if (timestampStr.length < 13) {
    var length = LEN - timestampStr.length;
    for (var i = 0; i < length; i++) {
      timestampStr += '0';
    }
  }
  return Number(timestampStr);
}

/**
 * 格式化时间戳为 yy.mm.dd 格式的时间
 *
 * @param {*} date
 */
function dateFormat(date) {
  var timestampStr = paddingTime(date);
  if (timestampStr.toString() !== 'NaN') {
    var timestamp = +timestampStr; // 隐式类型转换 将数字字符串类型转成数字类型
    var time = getDate(timestamp);
    var year = time.getFullYear();
    var month = time.getMonth() + 1;
    var day = time.getDate();

    return year + '.' + paddingTwo(month) + '.' + paddingTwo(day);
  }
  return '';
}

/**
 * 计算过去与现在的时间差
 * @param time
 */
function fromNow(time) {
  var past = paddingTime(time);
  var now = +getDate();
  var diff = now - past;
  var seconds = diff / 1000;
  if (seconds < 60) {
    return '刚刚';
  }

  var minutes = seconds / 60;
  if (minutes < 60) {
    return Math.floor(minutes) + '分钟前';
  }

  var hours = minutes / 60;
  if (hours >= 1 && hours <= 24) {
    return Math.floor(hours) + '小时前';
  }

  var days = hours / 24;
  if (days >= 1 && days < 2) {
    return '昨天';
  }

  if (days >= 2 && days < 3) {
    return '前天';
  }

  if (days >= 3 && days <= 7) {
    return Math.floor(days) + '天前';
  }

  return dateFormat(time);
}


/**
 * 获取当前时间在这一年是第几周 -- ISO 8601 标准
 * 第一个日历星期有以下四种等效说法：
 *  1，本年度第一个星期四所在的星期；
 *  2，1月4日所在的星期；
 *  3，本年度第一个至少有4天在同一星期内的星期；
 *  4，星期一在去年12月29日至今年1月4日以内的星期；
 *
 * @param {*} date
 * @returns
 */
function getWeek(date) {
  date = date || getDate();
  // 获取当前date的时间
  var targetThursday = getDate(date.getFullYear(), date.getMonth(), date.getDate());

  // 计算当前时间本周星期四的日期
  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);

  // 获取本年度的1月4日的时间
  var firstThursday = getDate(targetThursday.getFullYear(), 0, 4);

  // 计算本年度的1月4日所在周的星期四的日期 作为本年度的第一周开始日期
  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);

  // 检查当前时间星期四所在周的时区 与 本年度1月4日所在周的星期四的时区差
  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
  targetThursday.setHours(targetThursday.getHours() - ds);

  // 当前时间星期四所在周的时间与本年度1月4日所在周的星期四的时间差
  var weekDiff = (targetThursday - firstThursday) / (86400000*7);
  var week = 1 + Math.floor(weekDiff);

  return date.getFullYear() + '年第' + week + '周';
}

function convertRatioFormat(ratioStr) {
  var ratioArr = ratioStr.split(':');
  var width = +ratioArr[0]; // 将数字字符串转成数字 + '1' => 1
  var height = +ratioArr[1];
  var ratio = height / width;
  
  return ratio;
}

module.exports = {
  formatNumber: formatNumber,
  abs: abs,
  dateFormat: dateFormat,
  fromNow: fromNow,
  getWeek: getWeek,
  convertRatioFormat: convertRatioFormat
};
